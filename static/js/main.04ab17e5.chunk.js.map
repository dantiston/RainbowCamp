{"version":3,"sources":["App.js","serviceWorker.js","index.js","images sync nonrecursive //.png$","images/RainbowGeneric_Black.png","images/RainbowGeneric_Blue.png","images/RainbowGeneric_Brown.png","images/RainbowGeneric_Green.png","images/RainbowGeneric_Orange.png","images/RainbowGeneric_Purple.png","images/RainbowGeneric_Red.png","images/RainbowGeneric_Yellow.png"],"names":["logos","require","App","react_default","a","createElement","className","Grid","this","renderWelcome","renderDetails","renderRegister","Row","Col","Jumbotron","src","_select","style","maxWidth","alt","sm","md","renderDates","renderLocation","start","Date","end","today","Panel","Body","fontSize","height","renderDateMessage","concat","_getMonth","getDate","getFullYear","href","width","Button","bsStyle","bsSize","date","toLocaleString","month","context","key","keys","_randomWithin","length","floor","ceiling","Math","random","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","map","./RainbowGeneric_Black.png","./RainbowGeneric_Blue.png","./RainbowGeneric_Brown.png","./RainbowGeneric_Green.png","./RainbowGeneric_Orange.png","./RainbowGeneric_Purple.png","./RainbowGeneric_Red.png","./RainbowGeneric_Yellow.png","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","Object","resolve","module","exports","p"],"mappings":"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","file":"static/js/main.04ab17e5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Grid, Row, Col, Jumbotron, Button, Panel } from 'react-bootstrap';\n\nconst logos = require.context('./images', false, /\\.png$/);\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Grid>\n\n          { this.renderWelcome() }\n          { this.renderDetails() }\n          { this.renderRegister() }\n\n        </Grid>\n      </div>\n    );\n  }\n\n  renderWelcome() {\n    return (\n      <Row className=\"show-grid\">\n        <Col>\n          <Jumbotron>\n            <img\n              className=\"splash\"\n              src={this._select(logos)}\n              style={{\n                maxWidth: \"90%\",\n              }}\n              alt=\"Rainbow Camp Logo, with the text Rainbow Camp where the 'o' has a pride flag pattern inside\"\n            />\n            <p className=\"splash\">A 5 day faith experience for LGBTQ Youth and Young Adults.</p>\n          </Jumbotron>\n        </Col>\n      </Row>\n    );\n  }\n\n  renderDetails() {\n    return (\n      <Row className=\"show-grid\">\n        <Col sm={12} md={6}>\n          {this.renderDates()}\n        </Col>\n        <Col sm={12} md={6}>\n          {this.renderLocation()}\n        </Col>\n      </Row>\n    );\n  }\n\n  renderDates() {\n    const start = new Date(2019, 5, 24);\n    const end = new Date(2019, 5, 28);\n    const today = new Date();\n    return (\n      <Panel>\n        <Panel.Body style={{fontSize: 36, height: 98}}>\n          {this.renderDateMessage(start, end, today)}\n        </Panel.Body>\n      </Panel>\n    );\n  }\n\n  renderDateMessage(start, end, today) {\n    return today < end ?\n      `${this._getMonth(start)} ${start.getDate()} - ${end.getDate()}, ${start.getFullYear()}` :\n      `Check back later for ${end.getFullYear() + 1}`;\n  }\n\n  renderLocation() {\n    return (\n      <Panel>\n        <Panel.Body>\n          <a href=\"http://opretreat.org\">\n            <img\n              src=\"http://opretreat.org/wp-content/uploads/2017/01/cropped-OP-WEb-Logo-68pxhigh.png\"\n              alt=\"Ocean Park Retreat Center\"\n              style={{\n                width: \"100%\",\n              }}\n            />\n          </a>\n        </Panel.Body>\n      </Panel>\n    );\n  }\n\n  renderRegister() {\n    return (\n      <Row className=\"show-grid\">\n        <Col>\n          <Jumbotron>\n            <Button bsStyle=\"primary\" bsSize=\"large\" style={{fontSize: 48}}>\n              Register\n            </Button>\n          </Jumbotron>\n        </Col>\n      </Row>\n    );\n  }\n\n  _getMonth(date) {\n    return date.toLocaleString('en-us', { month: 'long' });\n  }\n\n  _select(context) {\n    const key = context.keys()[this._randomWithin(0, context.keys().length-1)];\n    return context(key);\n  }\n\n  _randomWithin(floor, ceiling) {\n    return floor + Math.floor((Math.random() * (ceiling - floor)) + 1)\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","var map = {\n\t\"./RainbowGeneric_Black.png\": 64,\n\t\"./RainbowGeneric_Blue.png\": 65,\n\t\"./RainbowGeneric_Brown.png\": 66,\n\t\"./RainbowGeneric_Green.png\": 67,\n\t\"./RainbowGeneric_Orange.png\": 68,\n\t\"./RainbowGeneric_Purple.png\": 69,\n\t\"./RainbowGeneric_Red.png\": 70,\n\t\"./RainbowGeneric_Yellow.png\": 71\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 63;","module.exports = __webpack_public_path__ + \"static/media/RainbowGeneric_Black.40ac4c90.png\";","module.exports = __webpack_public_path__ + \"static/media/RainbowGeneric_Blue.d8b9181d.png\";","module.exports = __webpack_public_path__ + \"static/media/RainbowGeneric_Brown.e363ecb8.png\";","module.exports = __webpack_public_path__ + \"static/media/RainbowGeneric_Green.efa46d48.png\";","module.exports = __webpack_public_path__ + \"static/media/RainbowGeneric_Orange.f8f0fbd4.png\";","module.exports = __webpack_public_path__ + \"static/media/RainbowGeneric_Purple.9b6d3012.png\";","module.exports = __webpack_public_path__ + \"static/media/RainbowGeneric_Red.4a8cab5b.png\";","module.exports = __webpack_public_path__ + \"static/media/RainbowGeneric_Yellow.f77440e9.png\";"],"sourceRoot":""}